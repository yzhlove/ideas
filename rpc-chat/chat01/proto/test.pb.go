// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MsgType int32

const (
	MsgType_None   MsgType = 0
	MsgType_System MsgType = 1
	MsgType_Stand  MsgType = 2
)

var MsgType_name = map[int32]string{
	0: "None",
	1: "System",
	2: "Stand",
}

var MsgType_value = map[string]int32{
	"None":   0,
	"System": 1,
	"Stand":  2,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

type Req struct {
	Sender               string   `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Id                   uint32   `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Time                 uint64   `protobuf:"varint,4,opt,name=Time,proto3" json:"Time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Req) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Req) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Req) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Resp struct {
	Sender               string       `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Content              string       `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Id                   uint32       `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Time                 uint64       `protobuf:"varint,4,opt,name=Time,proto3" json:"Time,omitempty"`
	Attr                 []*Attribute `protobuf:"bytes,5,rep,name=Attr,proto3" json:"Attr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resp.Unmarshal(m, b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
}
func (m *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(m, src)
}
func (m *Resp) XXX_Size() int {
	return xxx_messageInfo_Resp.Size(m)
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Resp) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Resp) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Resp) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Resp) GetAttr() []*Attribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

type Attribute struct {
	Desc                 string   `protobuf:"bytes,1,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Type                 MsgType  `protobuf:"varint,2,opt,name=Type,proto3,enum=MsgType" json:"Type,omitempty"`
	Extra                []byte   `protobuf:"bytes,3,opt,name=Extra,proto3" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}

func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attribute.Unmarshal(m, b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return xxx_messageInfo_Attribute.Size(m)
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Attribute) GetType() MsgType {
	if m != nil {
		return m.Type
	}
	return MsgType_None
}

func (m *Attribute) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterEnum("MsgType", MsgType_name, MsgType_value)
	proto.RegisterType((*Req)(nil), "Req")
	proto.RegisterType((*Resp)(nil), "Resp")
	proto.RegisterType((*Attribute)(nil), "Attribute")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x4d, 0x97, 0xac, 0xeb, 0x73, 0x8e, 0xf2, 0x14, 0x09, 0x22, 0x5a, 0x7a, 0x2a, 0x3b,
	0x14, 0xa9, 0x67, 0x0f, 0xfe, 0x18, 0xb8, 0x83, 0x22, 0xe9, 0x4e, 0x7a, 0xda, 0xd6, 0x87, 0x16,
	0xba, 0xa4, 0x6b, 0x23, 0x38, 0xf0, 0x8f, 0x97, 0xc6, 0x2a, 0xf8, 0x07, 0x78, 0xca, 0xfb, 0x7c,
	0x5e, 0x78, 0xf9, 0x92, 0x07, 0x60, 0xa9, 0xb5, 0x69, 0xdd, 0x18, 0x6b, 0xe2, 0x17, 0x18, 0x28,
	0xda, 0xe2, 0x31, 0x0c, 0x73, 0xd2, 0x05, 0x35, 0x92, 0x45, 0x2c, 0x09, 0x54, 0x4f, 0x28, 0xc1,
	0xbf, 0x35, 0xda, 0x92, 0xb6, 0xd2, 0x73, 0x8d, 0x1f, 0xc4, 0x09, 0x78, 0xf3, 0x42, 0x0e, 0x22,
	0x96, 0x1c, 0x28, 0x6f, 0x5e, 0x20, 0x02, 0x5f, 0x94, 0x1b, 0x92, 0x3c, 0x62, 0x09, 0x57, 0xae,
	0x8e, 0x3f, 0x81, 0x2b, 0x6a, 0xeb, 0xff, 0x99, 0x8e, 0x67, 0xc0, 0xaf, 0xad, 0x6d, 0xa4, 0x88,
	0x06, 0xc9, 0x7e, 0x06, 0x69, 0x07, 0xe5, 0xea, 0xdd, 0x92, 0x72, 0x3e, 0xce, 0x21, 0xf8, 0x55,
	0xdd, 0x80, 0x3b, 0x6a, 0xd7, 0x7d, 0x00, 0x57, 0xe3, 0x29, 0xf0, 0xc5, 0xae, 0x26, 0xf7, 0xf6,
	0x24, 0x1b, 0xa5, 0x0f, 0xed, 0x6b, 0xc7, 0xca, 0x59, 0x3c, 0x02, 0x31, 0xfb, 0xb0, 0xcd, 0xd2,
	0xa5, 0x18, 0xab, 0x6f, 0x98, 0x4e, 0xc1, 0xef, 0xaf, 0xe1, 0x08, 0xf8, 0xa3, 0xd1, 0x14, 0xee,
	0x21, 0xc0, 0x30, 0xdf, 0xb5, 0x96, 0x36, 0x21, 0xc3, 0x00, 0x44, 0x6e, 0x97, 0xba, 0x08, 0xbd,
	0xec, 0x0a, 0xc4, 0x3d, 0x55, 0x95, 0xc1, 0x43, 0xe0, 0xb3, 0xf5, 0x9b, 0x41, 0x9e, 0x2a, 0xda,
	0x9e, 0x88, 0xd4, 0x7d, 0xca, 0x39, 0x8c, 0x3b, 0xf9, 0x54, 0xd6, 0x54, 0x95, 0x9a, 0xfe, 0x34,
	0x13, 0x76, 0xc1, 0x6e, 0xfc, 0x67, 0xe1, 0x76, 0xb4, 0x1a, 0xba, 0xe3, 0xf2, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x6e, 0x22, 0x9d, 0x7e, 0xb8, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	Echo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	EchoPipeline(ctx context.Context, opts ...grpc.CallOption) (Hello_EchoPipelineClient, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Echo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/Hello/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) EchoPipeline(ctx context.Context, opts ...grpc.CallOption) (Hello_EchoPipelineClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Hello_serviceDesc.Streams[0], "/Hello/EchoPipeline", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloEchoPipelineClient{stream}
	return x, nil
}

type Hello_EchoPipelineClient interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ClientStream
}

type helloEchoPipelineClient struct {
	grpc.ClientStream
}

func (x *helloEchoPipelineClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloEchoPipelineClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	Echo(context.Context, *Req) (*Resp, error)
	EchoPipeline(Hello_EchoPipelineServer) error
}

// UnimplementedHelloServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (*UnimplementedHelloServer) Echo(ctx context.Context, req *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedHelloServer) EchoPipeline(srv Hello_EchoPipelineServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoPipeline not implemented")
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hello/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Echo(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_EchoPipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).EchoPipeline(&helloEchoPipelineServer{stream})
}

type Hello_EchoPipelineServer interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type helloEchoPipelineServer struct {
	grpc.ServerStream
}

func (x *helloEchoPipelineServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloEchoPipelineServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Hello_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoPipeline",
			Handler:       _Hello_EchoPipeline_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
